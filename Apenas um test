--[[
    Nebula UI Library
    Inspirada na Rayfield, mas com abordagem diferente
    Design moderno, performance otimizada e novas funcionalidades
]]

local Nebula = {
    Version = "1.0.0",
    Themes = {},
    Elements = {},
    CurrentTheme = "Dark",
    Config = {
        AutoSave = true,
        ConfigFolder = "Nebula_Configs"
    }
}

-- Serviços
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Variáveis internas
local NebulaUI = nil
local MainFrame = nil
local TabContainer = nil
local ContentContainer = nil
local NotificationContainer = nil
local Dragging = false
local DragStart = nil
local ElementStart = nil
local CurrentTabs = {}
local ActiveTab = nil
local Elements = {}

-- Temas pré-definidos
Nebula.Themes = {
    Dark = {
        Primary = Color3.fromRGB(25, 25, 35),
        Secondary = Color3.fromRGB(35, 35, 45),
        Accent = Color3.fromRGB(100, 70, 200),
        Text = Color3.fromRGB(240, 240, 240),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Success = Color3.fromRGB(85, 200, 100),
        Warning = Color3.fromRGB(255, 170, 50),
        Error = Color3.fromRGB(220, 80, 80)
    },
    
    Light = {
        Primary = Color3.fromRGB(245, 245, 250),
        Secondary = Color3.fromRGB(230, 230, 240),
        Accent = Color3.fromRGB(80, 120, 220),
        Text = Color3.fromRGB(30, 30, 40),
        TextSecondary = Color3.fromRGB(100, 100, 120),
        Success = Color3.fromRGB(65, 180, 80),
        Warning = Color3.fromRGB(220, 140, 30),
        Error = Color3.fromRGB(200, 60, 60)
    },
    
    Cyber = {
        Primary = Color3.fromRGB(15, 20, 30),
        Secondary = Color3.fromRGB(25, 35, 50),
        Accent = Color3.fromRGB(0, 255, 200),
        Text = Color3.fromRGB(220, 255, 255),
        TextSecondary = Color3.fromRGB(150, 200, 200),
        Success = Color3.fromRGB(0, 255, 150),
        Warning = Color3.fromRGB(255, 200, 0),
        Error = Color3.fromRGB(255, 50, 100)
    }
}

-- Funções utilitárias
local function CreateElement(className, properties)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

local function Tween(element, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(element, tweenInfo, properties)
    tween:Play()
    return tween
end

local function RoundCorners(element, cornerRadius)
    local corner = CreateElement("UICorner", {
        CornerRadius = UDim.new(0, cornerRadius or 8)
    })
    corner.Parent = element
    return corner
end

local function AddStroke(element, color, thickness)
    local stroke = CreateElement("UIStroke", {
        Color = color or Color3.new(1, 1, 1),
        Thickness = thickness or 1,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
    })
    stroke.Parent = element
    return stroke
end

-- Sistema de notificações
function Nebula:Notify(title, message, duration, notificationType)
    duration = duration or 5
    notificationType = notificationType or "Info"
    
    local notification = CreateElement("Frame", {
        Size = UDim2.new(0, 300, 0, 80),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 10, 1, -90),
        Parent = NotificationContainer
    })
    
    RoundCorners(notification, 6)
    AddStroke(notification, self.Themes[self.CurrentTheme].Primary, 2)
    
    local titleLabel = CreateElement("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = self.Themes[self.CurrentTheme].Text,
        TextScaled = true,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = notification
    })
    
    local messageLabel = CreateElement("TextLabel", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Text = message,
        TextColor3 = self.Themes[self.CurrentTheme].TextSecondary,
        TextScaled = true,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        Parent = notification
    })
    
    -- Barra de progresso
    local progressBar = CreateElement("Frame", {
        Size = UDim2.new(1, 0, 0, 3),
        Position = UDim2.new(0, 0, 1, -3),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Accent,
        BorderSizePixel = 0,
        Parent = notification
    })
    
    RoundCorners(progressBar, 0)
    
    -- Animação de entrada
    Tween(notification, {Position = UDim2.new(1, -320, 1, -90)}, 0.5, Enum.EasingStyle.Back)
    
    -- Animação da barra de progresso
    Tween(progressBar, {Size = UDim2.new(0, 0, 0, 3)}, duration, Enum.EasingStyle.Linear)
    
    -- Remover após a duração
    task.delay(duration, function()
        Tween(notification, {Position = UDim2.new(1, 10, 1, -90)}, 0.5, Enum.EasingStyle.Back)
        task.wait(0.5)
        notification:Destroy()
    end)
end

-- Função principal para criar a interface
function Nebula:CreateWindow(options)
    options = options or {}
    
    -- Criar a interface principal
    NebulaUI = CreateElement("ScreenGui", {
        Name = "NebulaUI",
        DisplayOrder = 999,
        ResetOnSpawn = false
    })
    
    if gethui then
        NebulaUI.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(NebulaUI)
        NebulaUI.Parent = game:GetService("CoreGui")
    else
        NebulaUI.Parent = game:GetService("CoreGui")
    end
    
    -- Frame principal
    MainFrame = CreateElement("Frame", {
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Primary,
        BorderSizePixel = 0,
        Parent = NebulaUI
    })
    
    RoundCorners(MainFrame, 12)
    AddStroke(MainFrame, self.Themes[self.CurrentTheme].Accent, 2)
    
    -- Header
    local header = CreateElement("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    RoundCorners(header, {TopLeft = 12, TopRight = 12, BottomLeft = 0, BottomRight = 0})
    
    local title = CreateElement("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = options.Title or "Nebula UI",
        TextColor3 = self.Themes[self.CurrentTheme].Text,
        TextScaled = true,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- Botões do header
    local closeBtn = CreateElement("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0.5, -15),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Error,
        Text = "×",
        TextColor3 = Color3.new(1, 1, 1),
        TextScaled = true,
        Font = Enum.Font.GothamBold,
        BorderSizePixel = 0,
        Parent = header
    })
    
    RoundCorners(closeBtn, 6)
    
    closeBtn.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    -- Container de abas
    TabContainer = CreateElement("Frame", {
        Size = UDim2.new(0, 120, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local tabListLayout = CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    -- Container de conteúdo
    ContentContainer = CreateElement("Frame", {
        Size = UDim2.new(1, -120, 1, -40),
        Position = UDim2.new(0, 120, 0, 40),
        BackgroundColor3 = self.Themes[self.CurrentTheme].Primary,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    -- Container de notificações
    NotificationContainer = CreateElement("Frame", {
        Size = UDim2.new(0, 300, 1, -20),
        Position = UDim2.new(1, -320, 0, 10),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = NebulaUI
    })
    
    local notificationLayout = CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = NotificationContainer
    })
    
    -- Sistema de arrastar
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            ElementStart = MainFrame.Position
        end
    end)
    
    header.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(
                ElementStart.X.Scale, 
                ElementStart.X.Offset + delta.X,
                ElementStart.Y.Scale, 
                ElementStart.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Retornar funções da janela
    local Window = {}
    
    function Window:CreateTab(name, icon)
        local tabButton = CreateElement("TextButton", {
            Size = UDim2.new(1, -10, 0, 40),
            BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
            Text = "",
            BorderSizePixel = 0,
            LayoutOrder = #CurrentTabs + 1,
            Parent = TabContainer
        })
        
        RoundCorners(tabButton, 6)
        
        local tabLabel = CreateElement("TextLabel", {
            Size = UDim2.new(1, -10, 1, -10),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Text = name,
            TextColor3 = self.Themes[self.CurrentTheme].TextSecondary,
            TextScaled = true,
            Font = Enum.Font.Gotham,
            Parent = tabButton
        })
        
        local tabContent = CreateElement("ScrollingFrame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 3,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            Parent = ContentContainer
        })
        
        local contentLayout = CreateElement("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
            Parent = tabContent
        })
        
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 10)
        end)
        
        -- Função para ativar a aba
        local function ActivateTab()
            if ActiveTab then
                ActiveTab.Button.BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary
                ActiveTab.Button.TextLabel.TextColor3 = self.Themes[self.CurrentTheme].TextSecondary
                ActiveTab.Content.Visible = false
            end
            
            ActiveTab = {
                Button = tabButton,
                Content = tabContent
            }
            
            tabButton.BackgroundColor3 = self.Themes[self.CurrentTheme].Accent
            tabLabel.TextColor3 = Color3.new(1, 1, 1)
            tabContent.Visible = true
        end
        
        tabButton.MouseButton1Click:Connect(ActivateTab)
        
        -- Ativar primeira aba
        if #CurrentTabs == 0 then
            ActivateTab()
        end
        
        table.insert(CurrentTabs, {
            Button = tabButton,
            Content = tabContent,
            Name = name
        })
        
        -- Retornar funções da aba
        local Tab = {}
        
        function Tab:AddButton(options)
            local button = CreateElement("TextButton", {
                Size = UDim2.new(1, -20, 0, 40),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
                Text = "",
                BorderSizePixel = 0,
                LayoutOrder = #tabContent:GetChildren(),
                Parent = tabContent
            })
            
            RoundCorners(button, 6)
            AddStroke(button, self.Themes[self.CurrentTheme].Accent, 1)
            
            local buttonLabel = CreateElement("TextLabel", {
                Size = UDim2.new(1, -20, 1, -10),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = options.Text or "Button",
                TextColor3 = self.Themes[self.CurrentTheme].Text,
                TextScaled = true,
                Font = Enum.Font.Gotham,
                Parent = button
            })
            
            button.MouseButton1Click:Connect(function()
                if options.Callback then
                    local success, err = pcall(options.Callback)
                    if not success then
                        self:Notify("Error", "Button callback error: " .. tostring(err), 5, "Error")
                    end
                end
                
                -- Feedback visual
                Tween(button, {BackgroundColor3 = self.Themes[self.CurrentTheme].Accent}, 0.1)
                Tween(buttonLabel, {TextColor3 = Color3.new(1, 1, 1)}, 0.1)
                
                task.wait(0.1)
                
                Tween(button, {BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary}, 0.3)
                Tween(buttonLabel, {TextColor3 = self.Themes[self.CurrentTheme].Text}, 0.3)
            end)
            
            return button
        end
        
        function Tab:AddToggle(options)
            local toggleFrame = CreateElement("Frame", {
                Size = UDim2.new(1, -20, 0, 40),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
                BorderSizePixel = 0,
                LayoutOrder = #tabContent:GetChildren(),
                Parent = tabContent
            })
            
            RoundCorners(toggleFrame, 6)
            AddStroke(toggleFrame, self.Themes[self.CurrentTheme].Accent, 1)
            
            local toggleLabel = CreateElement("TextLabel", {
                Size = UDim2.new(0.7, -10, 1, -10),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = options.Text or "Toggle",
                TextColor3 = self.Themes[self.CurrentTheme].Text,
                TextScaled = true,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleFrame
            })
            
            local toggleSwitch = CreateElement("Frame", {
                Size = UDim2.new(0, 50, 0, 25),
                Position = UDim2.new(1, -60, 0.5, -12.5),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Primary,
                BorderSizePixel = 0,
                Parent = toggleFrame
            })
            
            RoundCorners(toggleSwitch, 12)
            AddStroke(toggleSwitch, self.Themes[self.CurrentTheme].Accent, 2)
            
            local toggleKnob = CreateElement("Frame", {
                Size = UDim2.new(0, 21, 0, 21),
                Position = UDim2.new(0, 2, 0.5, -10.5),
                BackgroundColor3 = self.Themes[self.CurrentTheme].TextSecondary,
                BorderSizePixel = 0,
                Parent = toggleSwitch
            })
            
            RoundCorners(toggleKnob, 21)
            
            local state = options.Default or false
            
            local function UpdateToggle()
                if state then
                    Tween(toggleKnob, {Position = UDim2.new(0, 27, 0.5, -10.5)}, 0.2)
                    Tween(toggleKnob, {BackgroundColor3 = self.Themes[self.CurrentTheme].Success}, 0.2)
                    Tween(toggleSwitch, {BackgroundColor3 = self.Themes[self.CurrentTheme].Success}, 0.2)
                else
                    Tween(toggleKnob, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.2)
                    Tween(toggleKnob, {BackgroundColor3 = self.Themes[self.CurrentTheme].TextSecondary}, 0.2)
                    Tween(toggleSwitch, {BackgroundColor3 = self.Themes[self.CurrentTheme].Primary}, 0.2)
                end
            end
            
            UpdateToggle()
            
            toggleFrame.MouseButton1Click:Connect(function()
                state = not state
                UpdateToggle()
                
                if options.Callback then
                    local success, err = pcall(options.Callback, state)
                    if not success then
                        self:Notify("Error", "Toggle callback error: " .. tostring(err), 5, "Error")
                    end
                end
            end)
            
            local Toggle = {}
            function Toggle:Set(value)
                state = value
                UpdateToggle()
            end
            
            function Toggle:Get()
                return state
            end
            
            return Toggle
        end
        
        function Tab:AddSlider(options)
            local sliderFrame = CreateElement("Frame", {
                Size = UDim2.new(1, -20, 0, 60),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Secondary,
                BorderSizePixel = 0,
                LayoutOrder = #tabContent:GetChildren(),
                Parent = tabContent
            })
            
            RoundCorners(sliderFrame, 6)
            AddStroke(sliderFrame, self.Themes[self.CurrentTheme].Accent, 1)
            
            local sliderLabel = CreateElement("TextLabel", {
                Size = UDim2.new(1, -20, 0, 20),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Text = options.Text or "Slider",
                TextColor3 = self.Themes[self.CurrentTheme].Text,
                TextScaled = true,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderFrame
            })
            
            local sliderValue = CreateElement("TextLabel", {
                Size = UDim2.new(0, 60, 0, 20),
                Position = UDim2.new(1, -70, 0, 5),
                BackgroundTransparency = 1,
                Text = tostring(options.Default or options.Min or 0),
                TextColor3 = self.Themes[self.CurrentTheme].TextSecondary,
                TextScaled = true,
                Font = Enum.Font.Gotham,
                Parent = sliderFrame
            })
            
            local sliderTrack = CreateElement("Frame", {
                Size = UDim2.new(1, -20, 0, 6),
                Position = UDim2.new(0, 10, 1, -20),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Primary,
                BorderSizePixel = 0,
                Parent = sliderFrame
            })
            
            RoundCorners(sliderTrack, 3)
            
            local sliderProgress = CreateElement("Frame", {
                Size = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = self.Themes[self.CurrentTheme].Accent,
                BorderSizePixel = 0,
                Parent = sliderTrack
            })
            
            RoundCorners(sliderProgress, 3)
            
            local sliderKnob = CreateElement("Frame", {
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(0, -8, 0.5, -8),
                BackgroundColor3 = Color3.new(1, 1, 1),
                BorderSizePixel = 0,
                Parent = sliderTrack
            })
            
            RoundCorners(sliderKnob, 8)
            AddStroke(sliderKnob, self.Themes[self.CurrentTheme].Accent, 2)
            
            local min = options.Min or 0
            local max = options.Max or 100
            local current = options.Default or min
            local dragging = false
            
            local function UpdateSlider(value)
                current = math.clamp(value, min, max)
                local percentage = (current - min) / (max - min)
                
                sliderValue.Text = tostring(math.floor(current))
                sliderProgress.Size = UDim2.new(percentage, 0, 1, 0)
                sliderKnob.Position = UDim2.new(percentage, -8, 0.5, -8)
                
                if options.Callback then
                    local success, err = pcall(options.Callback, current)
                    if not success then
                        self:Notify("Error", "Slider callback error: " .. tostring(err), 5, "Error")
                    end
                end
            end
            
            sliderKnob.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            sliderKnob.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local trackPos = sliderTrack.AbsolutePosition
                    local trackSize = sliderTrack.AbsoluteSize
                    
                    local relativeX = (mousePos.X - trackPos.X) / trackSize.X
                    relativeX = math.clamp(relativeX, 0, 1)
                    
                    local value = min + (relativeX * (max - min))
                    UpdateSlider(value)
                end
            end)
            
            UpdateSlider(current)
            
            local Slider = {}
            function Slider:Set(value)
                UpdateSlider(value)
            end
            
            function Slider:Get()
                return current
            end
            
            return Slider
        end
        
        return Tab
    end
    
    function Window:SetTheme(themeName)
        if self.Themes[themeName] then
            self.CurrentTheme = themeName
            -- Atualizar cores da interface
            if MainFrame then
                MainFrame.BackgroundColor3 = self.Themes[themeName].Primary
                -- Atualizar outras cores...
            end
        end
    end
    
    function Window:Show()
        if MainFrame then
            MainFrame.Visible = true
        end
    end
    
    function Window:Hide()
        if MainFrame then
            MainFrame.Visible = false
        end
    end
    
    return Window
end

-- Função para destruir a interface
function Nebula:Destroy()
    if NebulaUI then
        NebulaUI:Destroy()
        NebulaUI = nil
    end
end

-- Função para toggle da interface
function Nebula:Toggle()
    if MainFrame then
        MainFrame.Visible = not MainFrame.Visible
    end
end

return Nebula
